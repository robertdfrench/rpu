.Dd $Mdocdate$
.Dt RPU 6
.Os "Your buddy Robert"
.
.
.
.Sh NAME
.Nm rpu
.Nd Your buddy Robert's processing unit
.
.
.
.Sh SYNOPSIS
.Nm rpu
.Ar program.s
.
.
.
.Sh DESCRIPTION
The
.Nm
command loads your buddy Robert's processing unit.
Give it a file name, and it will attempt to compile that file as
an
.Nm
program and execute it.
.Pp
Your buddy Robert wrote
.Nm
to make it as easy as possible to learn sorta-kinda how
computers work.
The goal is more about getting a rough idea and less about
building anything useful.
.
.
.
.Sh USAGE
.Bl -tag -width 3n
.It Ic \&n
Execute the next instruction
.It Ic \&Esc
Quit and return to the command line
.It Ic \&Up
Scroll the code window up
.It Ic \&Down
Scroll the code window down
.It Ic \&PgUp
Scroll the memory window up
.It Ic \&PgDown
Scroll the memory window down
.El
.
.
.
.Sh INSTRUCTION SET
.Nm
contains only a few instructions:
.
.Bl -tag -width 3n
.
.\" add
.It Ic \&add Ar x y
Adds the contents of register
.Ar x
and register
.Ar y ,
storing the answer in the
.Ic \&ans
register.
This is your best bet for adding two numbers.
(Note that
.Nm
can only count to 65,536, so it will throw a fit and exit if
your sum is bigger than that.)
.
.\" copy
.It Ic \&copy Ar src dst
Copies the contents or the
.Ar src
register into the
.Ar dst
register.
All of the bits from
.Ar src
are guaranteed to end up in
.Ar dst
or you will get a full refund!
.
.\" halt
.It Ic \&halt
Stops
.Nm
immediately.
Unplugs the power.
Perhaps a bit impolite, but machines don't have feelings.
.
.\" jump
.It Ic \&jump Ar dst cond
Normally, 
.Nm
will just execute the next instruction in the line.
If you are impatient and want to jump line, this is the
instruction for you!
.Ic \&jump
will tell
.Nm
to begin executing instructions at the address contained in the
.Ar dst
register IF AND ONLY IF
.Ar cond
is zero.
.
.\" mul
.It Ic \&mul Ar x y
Multiply the contents of register
.Ar x
against register
.Ar y ,
and store the answer in
.Ic \&ans .
(Note that
.Nm
can only count to 65,536, so it will throw a fit and exit if
your product is bigger than that.)
.
.\" noop
.It Ic \&noop
Does nothing! Sometimes it's good to take a break.
.
.\" pop
.It Ic \&pop Ar dst
Copies the value from the memory address given by
.Ar sp
into the 
.Ar dst
register. It will then increment the
.Ar sp
register so that subsequent pops retrieve the next available
stack item.
.
.\" push
.It Ic \&push Ar src
Copies the value from
.Ar src
into the address given by the
.Ar sp
register. It will then decrement the
.Ar sp
register so that subsequent pushes go to the next available
address.
.
.\" put
.It Ic \&put Ms x Ar dst
Places the literal number
.Ms x
into the register
.Ar dst .
If you need to hardcode some values into your program, this is
the easiest way to get them into a register.
.
.\" read
.It Ic \&read Ar addr dst
Read two bytes starting at
.Ar addr
into the register
.Ar dst .
So if the register
.Ar gp0
contains the value 100, and memory address 100 contains the
value 7, then "read gp0 gp1" will store the number 7 into the
.Ar gp1
register.
.
.\" sub
.It Ic \&sub Ar x y
Subtracts the value in register
.Ar y
from the value in register
.Ar x
and places the result in the
.Ic \&ans
register.
You really can't find a better subtractor on the market, unless
you want support for negative numbers.
.Nm
can't do negative numbers, so if
.Ar x
is bigger than
.Ar y
you are gonna be in trouble.
.
.\" write
.It Ic \&write Ar src addr
Writes the contents of the
.Ar src
register into the memory location defined in the
.Ar addr
register.
So if
.Ar src
contains '5' and
.Ar addr
contains '100', then this instruction will write the number 5
into the 100th byte of memory. (since this is a 16-bit machine,
it will simultaneously write the number 0 into the 101st byte of
memory).
.
.El
.
.
.
.Sh REGISTERS
Registers on the
.Nm
are either
.Dq "special purpose"
or
.Dq "general purpose" .
.
.Pp
The general purpose registers are yours to enjoy as you see fit.
Unlike some other platforms, your buddy Robert's processing unit
won't sneak shit into the general purpose registers in response
to other instructions. Nor will instructions implicitly reserve
general purpose registers, reading shit from them when you don't
expect.
.
.Pp
Special purpose registers are provided to you by your buddy
Robert in order to facilitate some specific task. Sometimes
their contents change in response to instructions, and some
instructions do implicitly rely on their contents.
.
.
.Ss General Purpose Registers
.Nm
programs can access these 16-bit registers at any time, with no
confusing implications. As an
.Nm
user, you are entitled to them without restriction.
.
.Bl -tag -width 3n
.
.\" gp0
.It Ic \&gp0
.Dq "First among equals"
.
.\" gp1
.It Ic \&gp1
.Dq "El Segundo"
.
.\" gp2
.It Ic \&gp2
.Dq "Sixteen wholesome bits"
.
.\" gp3
.It Ic \&gp3
.Dq "Sixteen bits, None the richer"
.
.\" gp4
.It Ic \&gp4
.Dq "Sweet Sixteen"
.
.\" gp5
.It Ic \&gp5
.Dq "Monday the 16th"
.
.\" gp6
.It Ic \&gp6
.Dq "PITHY_NAME_6"
.
.\" gp7
.It Ic \&gp7
.Dq "PITHY_NAME_7"
.
.El
.
.
.Ss Special Purpose Registers
These registers have specific use-cases. They are not generally
under the programmer's control or, when they are, may cause side
effects to happen (such as printing to the console, changing the
active device, etc).
.
.Bl -tag -width 3n
.
.\" ans
.It Ic \&ans
This read-only register holds the result (the "answer") of the
most recent mathematical calculation. The
.Ic \&add
and
.Ic \&sub
instructions affect the value of this register.
.
.\" dvc
.It Ic \&dvc
This register is read-write, but it changes the active device.
When
.Nm
boots, its value is 0, which means bytes copied to the
.Ic \&out
register will be written to the console.
Writing a different number into this register will cause output
bytes to be sent to the device associated with that number. If
no device is associated with the contents of this register,
writing to
.Ic \&out
will cause
.Nm
to become confused and throw in the towel.
.
.\" our
.It Ic \&out
Bytes written to this register are forwarded to the current
device, as determined by the
.Ic \&dvc
register.
It is write-only; attempting to read bytes from this register
will confuse
.Nm
and cause it to exit in shame.
.
.\" pc
.It Ic \&pc
The
.Dq "Program Counter"
contains the address of the instruction that will be executed
next by the
.Nm .
This is a read-only register; the only way to change its
contents is via the
.Ic \&jump
instruction.
.
.
.\" sp
.It Ic \&sp
This is the
.Dq "Stack Pointer" ,
which keeps track of where the next stack element should go. The
stack is a contiguous list of values that grows down from the
highest address in memory. The stack is
.Dq "Last In, First Out" ,
meaning that if you push the values 7, 14, and 21 onto the
stack, you can pop them off in reverse order: 21, 14, 7.
.El
.
.
.
.Sh EXAMPLES
This machine is kinda weird, so a few example programs might
help you get started.
.
.Ss Print 5 to the Console
Put the number 5 into a register, then copy that register's
value to the
.Ic out 
pseudo-register (so that it goes to the active device, which in
this case is assumed to be the console).
.Bd -literal -offset -indent

put  5   gp0
copy gp0 out
halt
.Ed
.
.Ss Add 5 to 7 and Print
Same as above, but we add the contents of two registers together
and print the result before halting.
.Bd -literal -offset -indent

put  5   gp0
put  7   gp1
add  gp0 gp1
copy ans out
halt
.Ed
.
.Ss The Fibonacci Sequence
This example will print as much of the Fibonacci sequence as
will fit in a 16-bit register, at which point
.Nm
will become confused and crash:
.Bd -literal -offset -indent

# Setup
put 0 gp0
put 1 gp1
put 0 gp7

# Print inital values
copy gp0 out
copy gp1 out

# Main loop
add  gp0   gp1 .LOOP
copy ans   out
copy gp1   gp0
copy ans   gp1
add  gp7   gp7
put  .LOOP gp6
jump gp6
.Ed
.
.
.
.Sh SEE ALSO
.Bl -tag -width 3n
.It Lk https://github.com/robertdfrench/rpu "Source Code"
.It Lk https://store.steampowered.com/app/1444480/Turing_Complete/ "Turing Complete"
.It Lk https://nostarch.com/foundationsofcomp "The Secret Life of Programs"
Patel
.El
